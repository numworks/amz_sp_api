=begin
#Selling Partner API for Finances

#The Selling Partner API for Finances helps you obtain financial information relevant to a seller's business. You can obtain financial events for a given order, financial event group, or date range without having to wait until a statement period closes. You can also obtain financial event groups for a given date range.

The version of the OpenAPI document: v0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.3.1

=end

require 'date'

module AmzSpApi::FinancesApiModel
  # Contains all information related to a financial event.
  class FinancialEvents
    # A list of shipment event information.
    attr_accessor :shipment_event_list

    # A list of shipment event information.
    attr_accessor :refund_event_list

    # A list of shipment event information.
    attr_accessor :guarantee_claim_event_list

    # A list of shipment event information.
    attr_accessor :chargeback_event_list

    # A list of events related to the seller's Pay with Amazon account.
    attr_accessor :pay_with_amazon_event_list

    # A list of information about solution provider credits.
    attr_accessor :service_provider_credit_event_list

    # A list of information about Retrocharge or RetrochargeReversal events.
    attr_accessor :retrocharge_event_list

    # A list of rental transaction event information.
    attr_accessor :rental_transaction_event_list

    # A list of sponsored products payment events.
    attr_accessor :product_ads_payment_event_list

    # A list of information about service fee events.
    attr_accessor :service_fee_event_list

    # A list of payment events for deal-related fees.
    attr_accessor :seller_deal_payment_event_list

    # A list of debt recovery event information.
    attr_accessor :debt_recovery_event_list

    # A list of loan servicing events.
    attr_accessor :loan_servicing_event_list

    # A list of adjustment event information for the seller's account.
    attr_accessor :adjustment_event_list

    # A list of SAFETReimbursementEvents.
    attr_accessor :safet_reimbursement_event_list

    # A list of information about fee events for the Early Reviewer Program.
    attr_accessor :seller_review_enrollment_payment_event_list

    # A list of FBA inventory liquidation payment events.
    attr_accessor :fba_liquidation_event_list

    # A list of coupon payment event information.
    attr_accessor :coupon_payment_event_list

    # A list of fee events related to Amazon Imaging services.
    attr_accessor :imaging_services_fee_event_list

    # A list of network commingling transaction events.
    attr_accessor :network_commingling_transaction_event_list

    # A list of expense information related to an affordability promotion.
    attr_accessor :affordability_expense_event_list

    # A list of expense information related to an affordability promotion.
    attr_accessor :affordability_expense_reversal_event_list

    # A list of information about trial shipment financial events.
    attr_accessor :trial_shipment_event_list

    # A list of information about shipment settle financial events.
    attr_accessor :shipment_settle_event_list

    # List of TaxWithholding events.
    attr_accessor :tax_withholding_event_list

    # A list of removal shipment event information.
    attr_accessor :removal_shipment_event_list

    # A comma-delimited list of Removal shipmentAdjustment details for FBA inventory.
    attr_accessor :removal_shipment_adjustment_event_list

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'shipment_event_list' => :'ShipmentEventList',
        :'refund_event_list' => :'RefundEventList',
        :'guarantee_claim_event_list' => :'GuaranteeClaimEventList',
        :'chargeback_event_list' => :'ChargebackEventList',
        :'pay_with_amazon_event_list' => :'PayWithAmazonEventList',
        :'service_provider_credit_event_list' => :'ServiceProviderCreditEventList',
        :'retrocharge_event_list' => :'RetrochargeEventList',
        :'rental_transaction_event_list' => :'RentalTransactionEventList',
        :'product_ads_payment_event_list' => :'ProductAdsPaymentEventList',
        :'service_fee_event_list' => :'ServiceFeeEventList',
        :'seller_deal_payment_event_list' => :'SellerDealPaymentEventList',
        :'debt_recovery_event_list' => :'DebtRecoveryEventList',
        :'loan_servicing_event_list' => :'LoanServicingEventList',
        :'adjustment_event_list' => :'AdjustmentEventList',
        :'safet_reimbursement_event_list' => :'SAFETReimbursementEventList',
        :'seller_review_enrollment_payment_event_list' => :'SellerReviewEnrollmentPaymentEventList',
        :'fba_liquidation_event_list' => :'FBALiquidationEventList',
        :'coupon_payment_event_list' => :'CouponPaymentEventList',
        :'imaging_services_fee_event_list' => :'ImagingServicesFeeEventList',
        :'network_commingling_transaction_event_list' => :'NetworkComminglingTransactionEventList',
        :'affordability_expense_event_list' => :'AffordabilityExpenseEventList',
        :'affordability_expense_reversal_event_list' => :'AffordabilityExpenseReversalEventList',
        :'trial_shipment_event_list' => :'TrialShipmentEventList',
        :'shipment_settle_event_list' => :'ShipmentSettleEventList',
        :'tax_withholding_event_list' => :'TaxWithholdingEventList',
        :'removal_shipment_event_list' => :'RemovalShipmentEventList',
        :'removal_shipment_adjustment_event_list' => :'RemovalShipmentAdjustmentEventList'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'shipment_event_list' => :'Array<ShipmentEvent>',
        :'refund_event_list' => :'Array<ShipmentEvent>',
        :'guarantee_claim_event_list' => :'Array<ShipmentEvent>',
        :'chargeback_event_list' => :'Array<ShipmentEvent>',
        :'pay_with_amazon_event_list' => :'Array<PayWithAmazonEvent>',
        :'service_provider_credit_event_list' => :'Array<SolutionProviderCreditEvent>',
        :'retrocharge_event_list' => :'Array<RetrochargeEvent>',
        :'rental_transaction_event_list' => :'Array<RentalTransactionEvent>',
        :'product_ads_payment_event_list' => :'Array<ProductAdsPaymentEvent>',
        :'service_fee_event_list' => :'Array<ServiceFeeEvent>',
        :'seller_deal_payment_event_list' => :'Array<SellerDealPaymentEvent>',
        :'debt_recovery_event_list' => :'Array<DebtRecoveryEvent>',
        :'loan_servicing_event_list' => :'Array<LoanServicingEvent>',
        :'adjustment_event_list' => :'Array<AdjustmentEvent>',
        :'safet_reimbursement_event_list' => :'Array<SAFETReimbursementEvent>',
        :'seller_review_enrollment_payment_event_list' => :'Array<SellerReviewEnrollmentPaymentEvent>',
        :'fba_liquidation_event_list' => :'Array<FBALiquidationEvent>',
        :'coupon_payment_event_list' => :'Array<CouponPaymentEvent>',
        :'imaging_services_fee_event_list' => :'Array<ImagingServicesFeeEvent>',
        :'network_commingling_transaction_event_list' => :'Array<NetworkComminglingTransactionEvent>',
        :'affordability_expense_event_list' => :'Array<AffordabilityExpenseEvent>',
        :'affordability_expense_reversal_event_list' => :'Array<AffordabilityExpenseEvent>',
        :'trial_shipment_event_list' => :'Array<TrialShipmentEvent>',
        :'shipment_settle_event_list' => :'Array<ShipmentEvent>',
        :'tax_withholding_event_list' => :'Array<TaxWithholdingEvent>',
        :'removal_shipment_event_list' => :'Array<RemovalShipmentEvent>',
        :'removal_shipment_adjustment_event_list' => :'Array<RemovalShipmentAdjustmentEvent>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `AmzSpApi::FinancesApiModel::FinancialEvents` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `AmzSpApi::FinancesApiModel::FinancialEvents`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'shipment_event_list')
        if (value = attributes[:'shipment_event_list']).is_a?(Array)
          self.shipment_event_list = value
        end
      end

      if attributes.key?(:'refund_event_list')
        if (value = attributes[:'refund_event_list']).is_a?(Array)
          self.refund_event_list = value
        end
      end

      if attributes.key?(:'guarantee_claim_event_list')
        if (value = attributes[:'guarantee_claim_event_list']).is_a?(Array)
          self.guarantee_claim_event_list = value
        end
      end

      if attributes.key?(:'chargeback_event_list')
        if (value = attributes[:'chargeback_event_list']).is_a?(Array)
          self.chargeback_event_list = value
        end
      end

      if attributes.key?(:'pay_with_amazon_event_list')
        if (value = attributes[:'pay_with_amazon_event_list']).is_a?(Array)
          self.pay_with_amazon_event_list = value
        end
      end

      if attributes.key?(:'service_provider_credit_event_list')
        if (value = attributes[:'service_provider_credit_event_list']).is_a?(Array)
          self.service_provider_credit_event_list = value
        end
      end

      if attributes.key?(:'retrocharge_event_list')
        if (value = attributes[:'retrocharge_event_list']).is_a?(Array)
          self.retrocharge_event_list = value
        end
      end

      if attributes.key?(:'rental_transaction_event_list')
        if (value = attributes[:'rental_transaction_event_list']).is_a?(Array)
          self.rental_transaction_event_list = value
        end
      end

      if attributes.key?(:'product_ads_payment_event_list')
        if (value = attributes[:'product_ads_payment_event_list']).is_a?(Array)
          self.product_ads_payment_event_list = value
        end
      end

      if attributes.key?(:'service_fee_event_list')
        if (value = attributes[:'service_fee_event_list']).is_a?(Array)
          self.service_fee_event_list = value
        end
      end

      if attributes.key?(:'seller_deal_payment_event_list')
        if (value = attributes[:'seller_deal_payment_event_list']).is_a?(Array)
          self.seller_deal_payment_event_list = value
        end
      end

      if attributes.key?(:'debt_recovery_event_list')
        if (value = attributes[:'debt_recovery_event_list']).is_a?(Array)
          self.debt_recovery_event_list = value
        end
      end

      if attributes.key?(:'loan_servicing_event_list')
        if (value = attributes[:'loan_servicing_event_list']).is_a?(Array)
          self.loan_servicing_event_list = value
        end
      end

      if attributes.key?(:'adjustment_event_list')
        if (value = attributes[:'adjustment_event_list']).is_a?(Array)
          self.adjustment_event_list = value
        end
      end

      if attributes.key?(:'safet_reimbursement_event_list')
        if (value = attributes[:'safet_reimbursement_event_list']).is_a?(Array)
          self.safet_reimbursement_event_list = value
        end
      end

      if attributes.key?(:'seller_review_enrollment_payment_event_list')
        if (value = attributes[:'seller_review_enrollment_payment_event_list']).is_a?(Array)
          self.seller_review_enrollment_payment_event_list = value
        end
      end

      if attributes.key?(:'fba_liquidation_event_list')
        if (value = attributes[:'fba_liquidation_event_list']).is_a?(Array)
          self.fba_liquidation_event_list = value
        end
      end

      if attributes.key?(:'coupon_payment_event_list')
        if (value = attributes[:'coupon_payment_event_list']).is_a?(Array)
          self.coupon_payment_event_list = value
        end
      end

      if attributes.key?(:'imaging_services_fee_event_list')
        if (value = attributes[:'imaging_services_fee_event_list']).is_a?(Array)
          self.imaging_services_fee_event_list = value
        end
      end

      if attributes.key?(:'network_commingling_transaction_event_list')
        if (value = attributes[:'network_commingling_transaction_event_list']).is_a?(Array)
          self.network_commingling_transaction_event_list = value
        end
      end

      if attributes.key?(:'affordability_expense_event_list')
        if (value = attributes[:'affordability_expense_event_list']).is_a?(Array)
          self.affordability_expense_event_list = value
        end
      end

      if attributes.key?(:'affordability_expense_reversal_event_list')
        if (value = attributes[:'affordability_expense_reversal_event_list']).is_a?(Array)
          self.affordability_expense_reversal_event_list = value
        end
      end

      if attributes.key?(:'trial_shipment_event_list')
        if (value = attributes[:'trial_shipment_event_list']).is_a?(Array)
          self.trial_shipment_event_list = value
        end
      end

      if attributes.key?(:'shipment_settle_event_list')
        if (value = attributes[:'shipment_settle_event_list']).is_a?(Array)
          self.shipment_settle_event_list = value
        end
      end

      if attributes.key?(:'tax_withholding_event_list')
        if (value = attributes[:'tax_withholding_event_list']).is_a?(Array)
          self.tax_withholding_event_list = value
        end
      end

      if attributes.key?(:'removal_shipment_event_list')
        if (value = attributes[:'removal_shipment_event_list']).is_a?(Array)
          self.removal_shipment_event_list = value
        end
      end

      if attributes.key?(:'removal_shipment_adjustment_event_list')
        if (value = attributes[:'removal_shipment_adjustment_event_list']).is_a?(Array)
          self.removal_shipment_adjustment_event_list = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          shipment_event_list == o.shipment_event_list &&
          refund_event_list == o.refund_event_list &&
          guarantee_claim_event_list == o.guarantee_claim_event_list &&
          chargeback_event_list == o.chargeback_event_list &&
          pay_with_amazon_event_list == o.pay_with_amazon_event_list &&
          service_provider_credit_event_list == o.service_provider_credit_event_list &&
          retrocharge_event_list == o.retrocharge_event_list &&
          rental_transaction_event_list == o.rental_transaction_event_list &&
          product_ads_payment_event_list == o.product_ads_payment_event_list &&
          service_fee_event_list == o.service_fee_event_list &&
          seller_deal_payment_event_list == o.seller_deal_payment_event_list &&
          debt_recovery_event_list == o.debt_recovery_event_list &&
          loan_servicing_event_list == o.loan_servicing_event_list &&
          adjustment_event_list == o.adjustment_event_list &&
          safet_reimbursement_event_list == o.safet_reimbursement_event_list &&
          seller_review_enrollment_payment_event_list == o.seller_review_enrollment_payment_event_list &&
          fba_liquidation_event_list == o.fba_liquidation_event_list &&
          coupon_payment_event_list == o.coupon_payment_event_list &&
          imaging_services_fee_event_list == o.imaging_services_fee_event_list &&
          network_commingling_transaction_event_list == o.network_commingling_transaction_event_list &&
          affordability_expense_event_list == o.affordability_expense_event_list &&
          affordability_expense_reversal_event_list == o.affordability_expense_reversal_event_list &&
          trial_shipment_event_list == o.trial_shipment_event_list &&
          shipment_settle_event_list == o.shipment_settle_event_list &&
          tax_withholding_event_list == o.tax_withholding_event_list &&
          removal_shipment_event_list == o.removal_shipment_event_list &&
          removal_shipment_adjustment_event_list == o.removal_shipment_adjustment_event_list
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [shipment_event_list, refund_event_list, guarantee_claim_event_list, chargeback_event_list, pay_with_amazon_event_list, service_provider_credit_event_list, retrocharge_event_list, rental_transaction_event_list, product_ads_payment_event_list, service_fee_event_list, seller_deal_payment_event_list, debt_recovery_event_list, loan_servicing_event_list, adjustment_event_list, safet_reimbursement_event_list, seller_review_enrollment_payment_event_list, fba_liquidation_event_list, coupon_payment_event_list, imaging_services_fee_event_list, network_commingling_transaction_event_list, affordability_expense_event_list, affordability_expense_reversal_event_list, trial_shipment_event_list, shipment_settle_event_list, tax_withholding_event_list, removal_shipment_event_list, removal_shipment_adjustment_event_list].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        AmzSpApi::FinancesApiModel.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end
        
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
