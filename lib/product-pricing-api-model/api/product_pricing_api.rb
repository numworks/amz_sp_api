=begin
#Selling Partner API for Pricing

#The Selling Partner API for Pricing helps you programmatically retrieve product pricing and offer pricing information for Amazon Marketplace products.  For more information, see the [Product Pricing v2022-05-01 Use Case Guide](doc:product-pricing-api-v2022-05-01-use-case-guide).

The version of the OpenAPI document: 2022-05-01

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.5.0

=end

require 'cgi'

module AmzSpApi::ProductPricingApiModel
  class ProductPricingApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Returns the set of responses that correspond to the batched list of up to 40 requests defined in the request body. The response for each successful (HTTP status code 200) request in the set includes the computed listing price at or below which a seller can expect to become the featured offer (before applicable promotions). This is called the featured offer expected price (FOEP). Featured offer is not guaranteed, because competing offers may change, and different offers may be featured based on other factors, including fulfillment capabilities to a specific customer. The response to an unsuccessful request includes the available error text.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.033 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
    # @param get_featured_offer_expected_price_batch_request_body [GetFeaturedOfferExpectedPriceBatchRequest] 
    # @param [Hash] opts the optional parameters
    # @return [GetFeaturedOfferExpectedPriceBatchResponse]
    def get_featured_offer_expected_price_batch(get_featured_offer_expected_price_batch_request_body, opts = {})
      data, _status_code, _headers = get_featured_offer_expected_price_batch_with_http_info(get_featured_offer_expected_price_batch_request_body, opts)
      data
    end

    # Returns the set of responses that correspond to the batched list of up to 40 requests defined in the request body. The response for each successful (HTTP status code 200) request in the set includes the computed listing price at or below which a seller can expect to become the featured offer (before applicable promotions). This is called the featured offer expected price (FOEP). Featured offer is not guaranteed, because competing offers may change, and different offers may be featured based on other factors, including fulfillment capabilities to a specific customer. The response to an unsuccessful request includes the available error text.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.033 | 1 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
    # @param get_featured_offer_expected_price_batch_request_body [GetFeaturedOfferExpectedPriceBatchRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetFeaturedOfferExpectedPriceBatchResponse, Integer, Hash)>] GetFeaturedOfferExpectedPriceBatchResponse data, response status code and response headers
    def get_featured_offer_expected_price_batch_with_http_info(get_featured_offer_expected_price_batch_request_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProductPricingApi.get_featured_offer_expected_price_batch ...'
      end
      # verify the required parameter 'get_featured_offer_expected_price_batch_request_body' is set
      if @api_client.config.client_side_validation && get_featured_offer_expected_price_batch_request_body.nil?
        fail ArgumentError, "Missing the required parameter 'get_featured_offer_expected_price_batch_request_body' when calling ProductPricingApi.get_featured_offer_expected_price_batch"
      end
      # resource path
      local_var_path = '/batches/products/pricing/2022-05-01/offer/featuredOfferExpectedPrice'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(get_featured_offer_expected_price_batch_request_body)

      # return_type
      return_type = opts[:debug_return_type] || 'GetFeaturedOfferExpectedPriceBatchResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ProductPricingApi.get_featured_offer_expected_price_batch",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductPricingApi#get_featured_offer_expected_price_batch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
