=begin
#Selling Partner API for Services

#With the Services API, you can build applications that help service providers get and modify their service orders and manage their resources.

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.5.0

=end

require 'cgi'

module AmzSpApi::ServicesApiModel
  class ServiceApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Adds an appointment to the service job indicated by the service job identifier specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
    # @param service_job_id [String] An Amazon defined service job identifier.
    # @param body [AddAppointmentRequest] Add appointment operation input details.
    # @param [Hash] opts the optional parameters
    # @return [SetAppointmentResponse]
    def add_appointment_for_service_job_by_service_job_id(service_job_id, body, opts = {})
      data, _status_code, _headers = add_appointment_for_service_job_by_service_job_id_with_http_info(service_job_id, body, opts)
      data
    end

    # Adds an appointment to the service job indicated by the service job identifier specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
    # @param service_job_id [String] An Amazon defined service job identifier.
    # @param body [AddAppointmentRequest] Add appointment operation input details.
    # @param [Hash] opts the optional parameters
    # @return [Array<(SetAppointmentResponse, Integer, Hash)>] SetAppointmentResponse data, response status code and response headers
    def add_appointment_for_service_job_by_service_job_id_with_http_info(service_job_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServiceApi.add_appointment_for_service_job_by_service_job_id ...'
      end
      # verify the required parameter 'service_job_id' is set
      if @api_client.config.client_side_validation && service_job_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_job_id' when calling ServiceApi.add_appointment_for_service_job_by_service_job_id"
      end
      if @api_client.config.client_side_validation && service_job_id.to_s.length > 100
        fail ArgumentError, 'invalid value for "service_job_id" when calling ServiceApi.add_appointment_for_service_job_by_service_job_id, the character length must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && service_job_id.to_s.length < 1
        fail ArgumentError, 'invalid value for "service_job_id" when calling ServiceApi.add_appointment_for_service_job_by_service_job_id, the character length must be great than or equal to 1.'
      end

      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ServiceApi.add_appointment_for_service_job_by_service_job_id"
      end
      # resource path
      local_var_path = '/service/v1/serviceJobs/{serviceJobId}/appointments'.sub('{' + 'serviceJobId' + '}', CGI.escape(service_job_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'SetAppointmentResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ServiceApi.add_appointment_for_service_job_by_service_job_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServiceApi#add_appointment_for_service_job_by_service_job_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Assigns new resource(s) or overwrite/update the existing one(s) to a service job appointment.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 2 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
    # @param service_job_id [String] An Amazon-defined service job identifier. Get this value by calling the &#x60;getServiceJobs&#x60; operation of the Services API.
    # @param appointment_id [String] An Amazon-defined identifier of active service job appointment.
    # @param body [AssignAppointmentResourcesRequest] 
    # @param [Hash] opts the optional parameters
    # @return [AssignAppointmentResourcesResponse]
    def assign_appointment_resources(service_job_id, appointment_id, body, opts = {})
      data, _status_code, _headers = assign_appointment_resources_with_http_info(service_job_id, appointment_id, body, opts)
      data
    end

    # Assigns new resource(s) or overwrite/update the existing one(s) to a service job appointment.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 2 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
    # @param service_job_id [String] An Amazon-defined service job identifier. Get this value by calling the &#x60;getServiceJobs&#x60; operation of the Services API.
    # @param appointment_id [String] An Amazon-defined identifier of active service job appointment.
    # @param body [AssignAppointmentResourcesRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AssignAppointmentResourcesResponse, Integer, Hash)>] AssignAppointmentResourcesResponse data, response status code and response headers
    def assign_appointment_resources_with_http_info(service_job_id, appointment_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServiceApi.assign_appointment_resources ...'
      end
      # verify the required parameter 'service_job_id' is set
      if @api_client.config.client_side_validation && service_job_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_job_id' when calling ServiceApi.assign_appointment_resources"
      end
      if @api_client.config.client_side_validation && service_job_id.to_s.length > 100
        fail ArgumentError, 'invalid value for "service_job_id" when calling ServiceApi.assign_appointment_resources, the character length must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && service_job_id.to_s.length < 1
        fail ArgumentError, 'invalid value for "service_job_id" when calling ServiceApi.assign_appointment_resources, the character length must be great than or equal to 1.'
      end

      # verify the required parameter 'appointment_id' is set
      if @api_client.config.client_side_validation && appointment_id.nil?
        fail ArgumentError, "Missing the required parameter 'appointment_id' when calling ServiceApi.assign_appointment_resources"
      end
      if @api_client.config.client_side_validation && appointment_id.to_s.length > 100
        fail ArgumentError, 'invalid value for "appointment_id" when calling ServiceApi.assign_appointment_resources, the character length must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && appointment_id.to_s.length < 1
        fail ArgumentError, 'invalid value for "appointment_id" when calling ServiceApi.assign_appointment_resources, the character length must be great than or equal to 1.'
      end

      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ServiceApi.assign_appointment_resources"
      end
      # resource path
      local_var_path = '/service/v1/serviceJobs/{serviceJobId}/appointments/{appointmentId}/resources'.sub('{' + 'serviceJobId' + '}', CGI.escape(service_job_id.to_s)).sub('{' + 'appointmentId' + '}', CGI.escape(appointment_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'AssignAppointmentResourcesResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ServiceApi.assign_appointment_resources",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServiceApi#assign_appointment_resources\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Cancel a reservation.   **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
    # @param reservation_id [String] Reservation Identifier
    # @param marketplace_ids [Array<String>] An identifier for the marketplace in which the resource operates.
    # @param [Hash] opts the optional parameters
    # @return [CancelReservationResponse]
    def cancel_reservation(reservation_id, marketplace_ids, opts = {})
      data, _status_code, _headers = cancel_reservation_with_http_info(reservation_id, marketplace_ids, opts)
      data
    end

    # Cancel a reservation.   **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
    # @param reservation_id [String] Reservation Identifier
    # @param marketplace_ids [Array<String>] An identifier for the marketplace in which the resource operates.
    # @param [Hash] opts the optional parameters
    # @return [Array<(CancelReservationResponse, Integer, Hash)>] CancelReservationResponse data, response status code and response headers
    def cancel_reservation_with_http_info(reservation_id, marketplace_ids, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServiceApi.cancel_reservation ...'
      end
      # verify the required parameter 'reservation_id' is set
      if @api_client.config.client_side_validation && reservation_id.nil?
        fail ArgumentError, "Missing the required parameter 'reservation_id' when calling ServiceApi.cancel_reservation"
      end
      if @api_client.config.client_side_validation && reservation_id.to_s.length > 100
        fail ArgumentError, 'invalid value for "reservation_id" when calling ServiceApi.cancel_reservation, the character length must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && reservation_id.to_s.length < 1
        fail ArgumentError, 'invalid value for "reservation_id" when calling ServiceApi.cancel_reservation, the character length must be great than or equal to 1.'
      end

      # verify the required parameter 'marketplace_ids' is set
      if @api_client.config.client_side_validation && marketplace_ids.nil?
        fail ArgumentError, "Missing the required parameter 'marketplace_ids' when calling ServiceApi.cancel_reservation"
      end
      if @api_client.config.client_side_validation && marketplace_ids.length > 1
        fail ArgumentError, 'invalid value for "marketplace_ids" when calling ServiceApi.cancel_reservation, number of items must be less than or equal to 1.'
      end

      # resource path
      local_var_path = '/service/v1/reservation/{reservationId}'.sub('{' + 'reservationId' + '}', CGI.escape(reservation_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'marketplaceIds'] = @api_client.build_collection_param(marketplace_ids, :csv)

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CancelReservationResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ServiceApi.cancel_reservation",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServiceApi#cancel_reservation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Cancels the service job indicated by the service job identifier specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
    # @param service_job_id [String] An Amazon defined service job identifier.
    # @param cancellation_reason_code [String] A cancel reason code that specifies the reason for cancelling a service job.
    # @param [Hash] opts the optional parameters
    # @return [CancelServiceJobByServiceJobIdResponse]
    def cancel_service_job_by_service_job_id(service_job_id, cancellation_reason_code, opts = {})
      data, _status_code, _headers = cancel_service_job_by_service_job_id_with_http_info(service_job_id, cancellation_reason_code, opts)
      data
    end

    # Cancels the service job indicated by the service job identifier specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
    # @param service_job_id [String] An Amazon defined service job identifier.
    # @param cancellation_reason_code [String] A cancel reason code that specifies the reason for cancelling a service job.
    # @param [Hash] opts the optional parameters
    # @return [Array<(CancelServiceJobByServiceJobIdResponse, Integer, Hash)>] CancelServiceJobByServiceJobIdResponse data, response status code and response headers
    def cancel_service_job_by_service_job_id_with_http_info(service_job_id, cancellation_reason_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServiceApi.cancel_service_job_by_service_job_id ...'
      end
      # verify the required parameter 'service_job_id' is set
      if @api_client.config.client_side_validation && service_job_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_job_id' when calling ServiceApi.cancel_service_job_by_service_job_id"
      end
      if @api_client.config.client_side_validation && service_job_id.to_s.length > 100
        fail ArgumentError, 'invalid value for "service_job_id" when calling ServiceApi.cancel_service_job_by_service_job_id, the character length must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && service_job_id.to_s.length < 1
        fail ArgumentError, 'invalid value for "service_job_id" when calling ServiceApi.cancel_service_job_by_service_job_id, the character length must be great than or equal to 1.'
      end

      # verify the required parameter 'cancellation_reason_code' is set
      if @api_client.config.client_side_validation && cancellation_reason_code.nil?
        fail ArgumentError, "Missing the required parameter 'cancellation_reason_code' when calling ServiceApi.cancel_service_job_by_service_job_id"
      end
      if @api_client.config.client_side_validation && cancellation_reason_code.to_s.length > 100
        fail ArgumentError, 'invalid value for "cancellation_reason_code" when calling ServiceApi.cancel_service_job_by_service_job_id, the character length must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && cancellation_reason_code.to_s.length < 1
        fail ArgumentError, 'invalid value for "cancellation_reason_code" when calling ServiceApi.cancel_service_job_by_service_job_id, the character length must be great than or equal to 1.'
      end

      pattern = Regexp.new(/^[A-Z0-9_]*$/)
      if @api_client.config.client_side_validation && cancellation_reason_code !~ pattern
        fail ArgumentError, "invalid value for 'cancellation_reason_code' when calling ServiceApi.cancel_service_job_by_service_job_id, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/service/v1/serviceJobs/{serviceJobId}/cancellations'.sub('{' + 'serviceJobId' + '}', CGI.escape(service_job_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'cancellationReasonCode'] = cancellation_reason_code

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CancelServiceJobByServiceJobIdResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ServiceApi.cancel_service_job_by_service_job_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServiceApi#cancel_service_job_by_service_job_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Completes the service job indicated by the service job identifier specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
    # @param service_job_id [String] An Amazon defined service job identifier.
    # @param [Hash] opts the optional parameters
    # @return [CompleteServiceJobByServiceJobIdResponse]
    def complete_service_job_by_service_job_id(service_job_id, opts = {})
      data, _status_code, _headers = complete_service_job_by_service_job_id_with_http_info(service_job_id, opts)
      data
    end

    # Completes the service job indicated by the service job identifier specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
    # @param service_job_id [String] An Amazon defined service job identifier.
    # @param [Hash] opts the optional parameters
    # @return [Array<(CompleteServiceJobByServiceJobIdResponse, Integer, Hash)>] CompleteServiceJobByServiceJobIdResponse data, response status code and response headers
    def complete_service_job_by_service_job_id_with_http_info(service_job_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServiceApi.complete_service_job_by_service_job_id ...'
      end
      # verify the required parameter 'service_job_id' is set
      if @api_client.config.client_side_validation && service_job_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_job_id' when calling ServiceApi.complete_service_job_by_service_job_id"
      end
      if @api_client.config.client_side_validation && service_job_id.to_s.length > 100
        fail ArgumentError, 'invalid value for "service_job_id" when calling ServiceApi.complete_service_job_by_service_job_id, the character length must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && service_job_id.to_s.length < 1
        fail ArgumentError, 'invalid value for "service_job_id" when calling ServiceApi.complete_service_job_by_service_job_id, the character length must be great than or equal to 1.'
      end

      # resource path
      local_var_path = '/service/v1/serviceJobs/{serviceJobId}/completions'.sub('{' + 'serviceJobId' + '}', CGI.escape(service_job_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CompleteServiceJobByServiceJobIdResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ServiceApi.complete_service_job_by_service_job_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServiceApi#complete_service_job_by_service_job_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a reservation.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
    # @param marketplace_ids [Array<String>] An identifier for the marketplace in which the resource operates.
    # @param body [CreateReservationRequest] Reservation details
    # @param [Hash] opts the optional parameters
    # @return [CreateReservationResponse]
    def create_reservation(marketplace_ids, body, opts = {})
      data, _status_code, _headers = create_reservation_with_http_info(marketplace_ids, body, opts)
      data
    end

    # Create a reservation.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
    # @param marketplace_ids [Array<String>] An identifier for the marketplace in which the resource operates.
    # @param body [CreateReservationRequest] Reservation details
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateReservationResponse, Integer, Hash)>] CreateReservationResponse data, response status code and response headers
    def create_reservation_with_http_info(marketplace_ids, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServiceApi.create_reservation ...'
      end
      # verify the required parameter 'marketplace_ids' is set
      if @api_client.config.client_side_validation && marketplace_ids.nil?
        fail ArgumentError, "Missing the required parameter 'marketplace_ids' when calling ServiceApi.create_reservation"
      end
      if @api_client.config.client_side_validation && marketplace_ids.length > 1
        fail ArgumentError, 'invalid value for "marketplace_ids" when calling ServiceApi.create_reservation, number of items must be less than or equal to 1.'
      end

      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ServiceApi.create_reservation"
      end
      # resource path
      local_var_path = '/service/v1/reservation'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'marketplaceIds'] = @api_client.build_collection_param(marketplace_ids, :csv)

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'CreateReservationResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ServiceApi.create_reservation",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServiceApi#create_reservation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Creates an upload destination.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
    # @param body [ServiceUploadDocument] Upload document operation input details.
    # @param [Hash] opts the optional parameters
    # @return [CreateServiceDocumentUploadDestination]
    def create_service_document_upload_destination(body, opts = {})
      data, _status_code, _headers = create_service_document_upload_destination_with_http_info(body, opts)
      data
    end

    # Creates an upload destination.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
    # @param body [ServiceUploadDocument] Upload document operation input details.
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateServiceDocumentUploadDestination, Integer, Hash)>] CreateServiceDocumentUploadDestination data, response status code and response headers
    def create_service_document_upload_destination_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServiceApi.create_service_document_upload_destination ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ServiceApi.create_service_document_upload_destination"
      end
      # resource path
      local_var_path = '/service/v1/documents'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'CreateServiceDocumentUploadDestination'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ServiceApi.create_service_document_upload_destination",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServiceApi#create_service_document_upload_destination\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets appointment slots as per the service context specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 20 | 40 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
    # @param asin [String] ASIN associated with the service.
    # @param store_id [String] Store identifier defining the region scope to retrive appointment slots.
    # @param marketplace_ids [Array<String>] An identifier for the marketplace for which appointment slots are queried
    # @param [Hash] opts the optional parameters
    # @option opts [String] :start_time A time from which the appointment slots will be retrieved. The specified time must be in ISO 8601 format. If &#x60;startTime&#x60; is provided, &#x60;endTime&#x60; should also be provided. Default value is as per business configuration.
    # @option opts [String] :end_time A time up to which the appointment slots will be retrieved. The specified time must be in ISO 8601 format. If &#x60;endTime&#x60; is provided, &#x60;startTime&#x60; should also be provided. Default value is as per business configuration. Maximum range of appointment slots can be 90 days.
    # @return [GetAppointmentSlotsResponse]
    def get_appointment_slots(asin, store_id, marketplace_ids, opts = {})
      data, _status_code, _headers = get_appointment_slots_with_http_info(asin, store_id, marketplace_ids, opts)
      data
    end

    # Gets appointment slots as per the service context specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 20 | 40 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
    # @param asin [String] ASIN associated with the service.
    # @param store_id [String] Store identifier defining the region scope to retrive appointment slots.
    # @param marketplace_ids [Array<String>] An identifier for the marketplace for which appointment slots are queried
    # @param [Hash] opts the optional parameters
    # @option opts [String] :start_time A time from which the appointment slots will be retrieved. The specified time must be in ISO 8601 format. If &#x60;startTime&#x60; is provided, &#x60;endTime&#x60; should also be provided. Default value is as per business configuration.
    # @option opts [String] :end_time A time up to which the appointment slots will be retrieved. The specified time must be in ISO 8601 format. If &#x60;endTime&#x60; is provided, &#x60;startTime&#x60; should also be provided. Default value is as per business configuration. Maximum range of appointment slots can be 90 days.
    # @return [Array<(GetAppointmentSlotsResponse, Integer, Hash)>] GetAppointmentSlotsResponse data, response status code and response headers
    def get_appointment_slots_with_http_info(asin, store_id, marketplace_ids, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServiceApi.get_appointment_slots ...'
      end
      # verify the required parameter 'asin' is set
      if @api_client.config.client_side_validation && asin.nil?
        fail ArgumentError, "Missing the required parameter 'asin' when calling ServiceApi.get_appointment_slots"
      end
      # verify the required parameter 'store_id' is set
      if @api_client.config.client_side_validation && store_id.nil?
        fail ArgumentError, "Missing the required parameter 'store_id' when calling ServiceApi.get_appointment_slots"
      end
      if @api_client.config.client_side_validation && store_id.to_s.length > 100
        fail ArgumentError, 'invalid value for "store_id" when calling ServiceApi.get_appointment_slots, the character length must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && store_id.to_s.length < 1
        fail ArgumentError, 'invalid value for "store_id" when calling ServiceApi.get_appointment_slots, the character length must be great than or equal to 1.'
      end

      # verify the required parameter 'marketplace_ids' is set
      if @api_client.config.client_side_validation && marketplace_ids.nil?
        fail ArgumentError, "Missing the required parameter 'marketplace_ids' when calling ServiceApi.get_appointment_slots"
      end
      if @api_client.config.client_side_validation && marketplace_ids.length > 1
        fail ArgumentError, 'invalid value for "marketplace_ids" when calling ServiceApi.get_appointment_slots, number of items must be less than or equal to 1.'
      end

      # resource path
      local_var_path = '/service/v1/appointmentSlots'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'asin'] = asin
      query_params[:'storeId'] = store_id
      query_params[:'marketplaceIds'] = @api_client.build_collection_param(marketplace_ids, :csv)
      query_params[:'startTime'] = opts[:'start_time'] if !opts[:'start_time'].nil?
      query_params[:'endTime'] = opts[:'end_time'] if !opts[:'end_time'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetAppointmentSlotsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ServiceApi.get_appointment_slots",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServiceApi#get_appointment_slots\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets appointment slots for the service associated with the service job id specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
    # @param service_job_id [String] A service job identifier to retrive appointment slots for associated service.
    # @param marketplace_ids [Array<String>] An identifier for the marketplace in which the resource operates.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :start_time A time from which the appointment slots will be retrieved. The specified time must be in ISO 8601 format. If &#x60;startTime&#x60; is provided, &#x60;endTime&#x60; should also be provided. Default value is as per business configuration.
    # @option opts [String] :end_time A time up to which the appointment slots will be retrieved. The specified time must be in ISO 8601 format. If &#x60;endTime&#x60; is provided, &#x60;startTime&#x60; should also be provided. Default value is as per business configuration. Maximum range of appointment slots can be 90 days.
    # @return [GetAppointmentSlotsResponse]
    def get_appointmment_slots_by_job_id(service_job_id, marketplace_ids, opts = {})
      data, _status_code, _headers = get_appointmment_slots_by_job_id_with_http_info(service_job_id, marketplace_ids, opts)
      data
    end

    # Gets appointment slots for the service associated with the service job id specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
    # @param service_job_id [String] A service job identifier to retrive appointment slots for associated service.
    # @param marketplace_ids [Array<String>] An identifier for the marketplace in which the resource operates.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :start_time A time from which the appointment slots will be retrieved. The specified time must be in ISO 8601 format. If &#x60;startTime&#x60; is provided, &#x60;endTime&#x60; should also be provided. Default value is as per business configuration.
    # @option opts [String] :end_time A time up to which the appointment slots will be retrieved. The specified time must be in ISO 8601 format. If &#x60;endTime&#x60; is provided, &#x60;startTime&#x60; should also be provided. Default value is as per business configuration. Maximum range of appointment slots can be 90 days.
    # @return [Array<(GetAppointmentSlotsResponse, Integer, Hash)>] GetAppointmentSlotsResponse data, response status code and response headers
    def get_appointmment_slots_by_job_id_with_http_info(service_job_id, marketplace_ids, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServiceApi.get_appointmment_slots_by_job_id ...'
      end
      # verify the required parameter 'service_job_id' is set
      if @api_client.config.client_side_validation && service_job_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_job_id' when calling ServiceApi.get_appointmment_slots_by_job_id"
      end
      if @api_client.config.client_side_validation && service_job_id.to_s.length > 100
        fail ArgumentError, 'invalid value for "service_job_id" when calling ServiceApi.get_appointmment_slots_by_job_id, the character length must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && service_job_id.to_s.length < 1
        fail ArgumentError, 'invalid value for "service_job_id" when calling ServiceApi.get_appointmment_slots_by_job_id, the character length must be great than or equal to 1.'
      end

      # verify the required parameter 'marketplace_ids' is set
      if @api_client.config.client_side_validation && marketplace_ids.nil?
        fail ArgumentError, "Missing the required parameter 'marketplace_ids' when calling ServiceApi.get_appointmment_slots_by_job_id"
      end
      if @api_client.config.client_side_validation && marketplace_ids.length > 1
        fail ArgumentError, 'invalid value for "marketplace_ids" when calling ServiceApi.get_appointmment_slots_by_job_id, number of items must be less than or equal to 1.'
      end

      # resource path
      local_var_path = '/service/v1/serviceJobs/{serviceJobId}/appointmentSlots'.sub('{' + 'serviceJobId' + '}', CGI.escape(service_job_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'marketplaceIds'] = @api_client.build_collection_param(marketplace_ids, :csv)
      query_params[:'startTime'] = opts[:'start_time'] if !opts[:'start_time'].nil?
      query_params[:'endTime'] = opts[:'end_time'] if !opts[:'end_time'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetAppointmentSlotsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ServiceApi.get_appointmment_slots_by_job_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServiceApi#get_appointmment_slots_by_job_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Provides capacity in fixed-size slots.   **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
    # @param resource_id [String] Resource Identifier.
    # @param marketplace_ids [Array<String>] An identifier for the marketplace in which the resource operates.
    # @param body [FixedSlotCapacityQuery] Request body.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :next_page_token Next page token returned in the response of your previous request.
    # @return [FixedSlotCapacity]
    def get_fixed_slot_capacity(resource_id, marketplace_ids, body, opts = {})
      data, _status_code, _headers = get_fixed_slot_capacity_with_http_info(resource_id, marketplace_ids, body, opts)
      data
    end

    # Provides capacity in fixed-size slots.   **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
    # @param resource_id [String] Resource Identifier.
    # @param marketplace_ids [Array<String>] An identifier for the marketplace in which the resource operates.
    # @param body [FixedSlotCapacityQuery] Request body.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :next_page_token Next page token returned in the response of your previous request.
    # @return [Array<(FixedSlotCapacity, Integer, Hash)>] FixedSlotCapacity data, response status code and response headers
    def get_fixed_slot_capacity_with_http_info(resource_id, marketplace_ids, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServiceApi.get_fixed_slot_capacity ...'
      end
      # verify the required parameter 'resource_id' is set
      if @api_client.config.client_side_validation && resource_id.nil?
        fail ArgumentError, "Missing the required parameter 'resource_id' when calling ServiceApi.get_fixed_slot_capacity"
      end
      if @api_client.config.client_side_validation && resource_id.to_s.length > 100
        fail ArgumentError, 'invalid value for "resource_id" when calling ServiceApi.get_fixed_slot_capacity, the character length must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && resource_id.to_s.length < 1
        fail ArgumentError, 'invalid value for "resource_id" when calling ServiceApi.get_fixed_slot_capacity, the character length must be great than or equal to 1.'
      end

      # verify the required parameter 'marketplace_ids' is set
      if @api_client.config.client_side_validation && marketplace_ids.nil?
        fail ArgumentError, "Missing the required parameter 'marketplace_ids' when calling ServiceApi.get_fixed_slot_capacity"
      end
      if @api_client.config.client_side_validation && marketplace_ids.length > 1
        fail ArgumentError, 'invalid value for "marketplace_ids" when calling ServiceApi.get_fixed_slot_capacity, number of items must be less than or equal to 1.'
      end

      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ServiceApi.get_fixed_slot_capacity"
      end
      # resource path
      local_var_path = '/service/v1/serviceResources/{resourceId}/capacity/fixed'.sub('{' + 'resourceId' + '}', CGI.escape(resource_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'marketplaceIds'] = @api_client.build_collection_param(marketplace_ids, :csv)
      query_params[:'nextPageToken'] = opts[:'next_page_token'] if !opts[:'next_page_token'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'FixedSlotCapacity'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ServiceApi.get_fixed_slot_capacity",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServiceApi#get_fixed_slot_capacity\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Provides capacity slots in a format similar to availability records.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
    # @param resource_id [String] Resource Identifier.
    # @param marketplace_ids [Array<String>] An identifier for the marketplace in which the resource operates.
    # @param body [RangeSlotCapacityQuery] Request body.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :next_page_token Next page token returned in the response of your previous request.
    # @return [RangeSlotCapacity]
    def get_range_slot_capacity(resource_id, marketplace_ids, body, opts = {})
      data, _status_code, _headers = get_range_slot_capacity_with_http_info(resource_id, marketplace_ids, body, opts)
      data
    end

    # Provides capacity slots in a format similar to availability records.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
    # @param resource_id [String] Resource Identifier.
    # @param marketplace_ids [Array<String>] An identifier for the marketplace in which the resource operates.
    # @param body [RangeSlotCapacityQuery] Request body.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :next_page_token Next page token returned in the response of your previous request.
    # @return [Array<(RangeSlotCapacity, Integer, Hash)>] RangeSlotCapacity data, response status code and response headers
    def get_range_slot_capacity_with_http_info(resource_id, marketplace_ids, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServiceApi.get_range_slot_capacity ...'
      end
      # verify the required parameter 'resource_id' is set
      if @api_client.config.client_side_validation && resource_id.nil?
        fail ArgumentError, "Missing the required parameter 'resource_id' when calling ServiceApi.get_range_slot_capacity"
      end
      if @api_client.config.client_side_validation && resource_id.to_s.length > 100
        fail ArgumentError, 'invalid value for "resource_id" when calling ServiceApi.get_range_slot_capacity, the character length must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && resource_id.to_s.length < 1
        fail ArgumentError, 'invalid value for "resource_id" when calling ServiceApi.get_range_slot_capacity, the character length must be great than or equal to 1.'
      end

      # verify the required parameter 'marketplace_ids' is set
      if @api_client.config.client_side_validation && marketplace_ids.nil?
        fail ArgumentError, "Missing the required parameter 'marketplace_ids' when calling ServiceApi.get_range_slot_capacity"
      end
      if @api_client.config.client_side_validation && marketplace_ids.length > 1
        fail ArgumentError, 'invalid value for "marketplace_ids" when calling ServiceApi.get_range_slot_capacity, number of items must be less than or equal to 1.'
      end

      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ServiceApi.get_range_slot_capacity"
      end
      # resource path
      local_var_path = '/service/v1/serviceResources/{resourceId}/capacity/range'.sub('{' + 'resourceId' + '}', CGI.escape(resource_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'marketplaceIds'] = @api_client.build_collection_param(marketplace_ids, :csv)
      query_params[:'nextPageToken'] = opts[:'next_page_token'] if !opts[:'next_page_token'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'RangeSlotCapacity'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ServiceApi.get_range_slot_capacity",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServiceApi#get_range_slot_capacity\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets details of service job indicated by the provided `serviceJobID`.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 20 | 40 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
    # @param service_job_id [String] A service job identifier.
    # @param [Hash] opts the optional parameters
    # @return [GetServiceJobByServiceJobIdResponse]
    def get_service_job_by_service_job_id(service_job_id, opts = {})
      data, _status_code, _headers = get_service_job_by_service_job_id_with_http_info(service_job_id, opts)
      data
    end

    # Gets details of service job indicated by the provided &#x60;serviceJobID&#x60;.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 20 | 40 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
    # @param service_job_id [String] A service job identifier.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetServiceJobByServiceJobIdResponse, Integer, Hash)>] GetServiceJobByServiceJobIdResponse data, response status code and response headers
    def get_service_job_by_service_job_id_with_http_info(service_job_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServiceApi.get_service_job_by_service_job_id ...'
      end
      # verify the required parameter 'service_job_id' is set
      if @api_client.config.client_side_validation && service_job_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_job_id' when calling ServiceApi.get_service_job_by_service_job_id"
      end
      if @api_client.config.client_side_validation && service_job_id.to_s.length > 100
        fail ArgumentError, 'invalid value for "service_job_id" when calling ServiceApi.get_service_job_by_service_job_id, the character length must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && service_job_id.to_s.length < 1
        fail ArgumentError, 'invalid value for "service_job_id" when calling ServiceApi.get_service_job_by_service_job_id, the character length must be great than or equal to 1.'
      end

      # resource path
      local_var_path = '/service/v1/serviceJobs/{serviceJobId}'.sub('{' + 'serviceJobId' + '}', CGI.escape(service_job_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetServiceJobByServiceJobIdResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ServiceApi.get_service_job_by_service_job_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServiceApi#get_service_job_by_service_job_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets service job details for the specified filter query.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 10 | 40 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
    # @param marketplace_ids [Array<String>] Used to select jobs that were placed in the specified marketplaces.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :service_order_ids List of service order ids for the query you want to perform.Max values supported 20.
    # @option opts [Array<String>] :service_job_status A list of one or more job status by which to filter the list of jobs.
    # @option opts [String] :page_token String returned in the response of your previous request.
    # @option opts [Integer] :page_size A non-negative integer that indicates the maximum number of jobs to return in the list, Value must be 1 - 20. Default 20. (default to 20)
    # @option opts [String] :sort_field Sort fields on which you want to sort the output.
    # @option opts [String] :sort_order Sort order for the query you want to perform.
    # @option opts [String] :created_after A date used for selecting jobs created at or after a specified time. Must be in ISO 8601 format. Required if &#x60;LastUpdatedAfter&#x60; is not specified. Specifying both &#x60;CreatedAfter&#x60; and &#x60;LastUpdatedAfter&#x60; returns an error.
    # @option opts [String] :created_before A date used for selecting jobs created at or before a specified time. Must be in ISO 8601 format.
    # @option opts [String] :last_updated_after A date used for selecting jobs updated at or after a specified time. Must be in ISO 8601 format. Required if &#x60;createdAfter&#x60; is not specified. Specifying both &#x60;CreatedAfter&#x60; and &#x60;LastUpdatedAfter&#x60; returns an error.
    # @option opts [String] :last_updated_before A date used for selecting jobs updated at or before a specified time. Must be in ISO 8601 format.
    # @option opts [String] :schedule_start_date A date used for filtering jobs schedules at or after a specified time. Must be in ISO 8601 format. Schedule end date should not be earlier than schedule start date.
    # @option opts [String] :schedule_end_date A date used for filtering jobs schedules at or before a specified time. Must be in ISO 8601 format. Schedule end date should not be earlier than schedule start date.
    # @option opts [Array<String>] :asins List of Amazon Standard Identification Numbers (ASIN) of the items. Max values supported is 20.
    # @option opts [Array<String>] :required_skills A defined set of related knowledge, skills, experience, tools, materials, and work processes common to service delivery for a set of products and/or service scenarios. Max values supported is 20.
    # @option opts [Array<String>] :store_ids List of Amazon-defined identifiers for the region scope. Max values supported is 50.
    # @return [GetServiceJobsResponse]
    def get_service_jobs(marketplace_ids, opts = {})
      data, _status_code, _headers = get_service_jobs_with_http_info(marketplace_ids, opts)
      data
    end

    # Gets service job details for the specified filter query.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 10 | 40 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
    # @param marketplace_ids [Array<String>] Used to select jobs that were placed in the specified marketplaces.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :service_order_ids List of service order ids for the query you want to perform.Max values supported 20.
    # @option opts [Array<String>] :service_job_status A list of one or more job status by which to filter the list of jobs.
    # @option opts [String] :page_token String returned in the response of your previous request.
    # @option opts [Integer] :page_size A non-negative integer that indicates the maximum number of jobs to return in the list, Value must be 1 - 20. Default 20. (default to 20)
    # @option opts [String] :sort_field Sort fields on which you want to sort the output.
    # @option opts [String] :sort_order Sort order for the query you want to perform.
    # @option opts [String] :created_after A date used for selecting jobs created at or after a specified time. Must be in ISO 8601 format. Required if &#x60;LastUpdatedAfter&#x60; is not specified. Specifying both &#x60;CreatedAfter&#x60; and &#x60;LastUpdatedAfter&#x60; returns an error.
    # @option opts [String] :created_before A date used for selecting jobs created at or before a specified time. Must be in ISO 8601 format.
    # @option opts [String] :last_updated_after A date used for selecting jobs updated at or after a specified time. Must be in ISO 8601 format. Required if &#x60;createdAfter&#x60; is not specified. Specifying both &#x60;CreatedAfter&#x60; and &#x60;LastUpdatedAfter&#x60; returns an error.
    # @option opts [String] :last_updated_before A date used for selecting jobs updated at or before a specified time. Must be in ISO 8601 format.
    # @option opts [String] :schedule_start_date A date used for filtering jobs schedules at or after a specified time. Must be in ISO 8601 format. Schedule end date should not be earlier than schedule start date.
    # @option opts [String] :schedule_end_date A date used for filtering jobs schedules at or before a specified time. Must be in ISO 8601 format. Schedule end date should not be earlier than schedule start date.
    # @option opts [Array<String>] :asins List of Amazon Standard Identification Numbers (ASIN) of the items. Max values supported is 20.
    # @option opts [Array<String>] :required_skills A defined set of related knowledge, skills, experience, tools, materials, and work processes common to service delivery for a set of products and/or service scenarios. Max values supported is 20.
    # @option opts [Array<String>] :store_ids List of Amazon-defined identifiers for the region scope. Max values supported is 50.
    # @return [Array<(GetServiceJobsResponse, Integer, Hash)>] GetServiceJobsResponse data, response status code and response headers
    def get_service_jobs_with_http_info(marketplace_ids, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServiceApi.get_service_jobs ...'
      end
      # verify the required parameter 'marketplace_ids' is set
      if @api_client.config.client_side_validation && marketplace_ids.nil?
        fail ArgumentError, "Missing the required parameter 'marketplace_ids' when calling ServiceApi.get_service_jobs"
      end
      if @api_client.config.client_side_validation && marketplace_ids.length > 1
        fail ArgumentError, 'invalid value for "marketplace_ids" when calling ServiceApi.get_service_jobs, number of items must be less than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'service_order_ids'].nil? && opts[:'service_order_ids'].length > 20
        fail ArgumentError, 'invalid value for "opts[:"service_order_ids"]" when calling ServiceApi.get_service_jobs, number of items must be less than or equal to 20.'
      end

      if @api_client.config.client_side_validation && !opts[:'service_order_ids'].nil? && opts[:'service_order_ids'].length < 1
        fail ArgumentError, 'invalid value for "opts[:"service_order_ids"]" when calling ServiceApi.get_service_jobs, number of items must be greater than or equal to 1.'
      end

      allowable_values = ["NOT_SERVICED", "CANCELLED", "COMPLETED", "PENDING_SCHEDULE", "NOT_FULFILLABLE", "HOLD", "PAYMENT_DECLINED"]
      if @api_client.config.client_side_validation && opts[:'service_job_status'] && !opts[:'service_job_status'].all? { |item| allowable_values.include?(item) }
        fail ArgumentError, "invalid value for \"service_job_status\", must include one of #{allowable_values}"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 20
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ServiceApi.get_service_jobs, must be smaller than or equal to 20.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ServiceApi.get_service_jobs, must be greater than or equal to 1.'
      end

      allowable_values = ["JOB_DATE", "JOB_STATUS"]
      if @api_client.config.client_side_validation && opts[:'sort_field'] && !allowable_values.include?(opts[:'sort_field'])
        fail ArgumentError, "invalid value for \"sort_field\", must be one of #{allowable_values}"
      end
      allowable_values = ["ASC", "DESC"]
      if @api_client.config.client_side_validation && opts[:'sort_order'] && !allowable_values.include?(opts[:'sort_order'])
        fail ArgumentError, "invalid value for \"sort_order\", must be one of #{allowable_values}"
      end
      if @api_client.config.client_side_validation && !opts[:'asins'].nil? && opts[:'asins'].length > 20
        fail ArgumentError, 'invalid value for "opts[:"asins"]" when calling ServiceApi.get_service_jobs, number of items must be less than or equal to 20.'
      end

      if @api_client.config.client_side_validation && !opts[:'asins'].nil? && opts[:'asins'].length < 1
        fail ArgumentError, 'invalid value for "opts[:"asins"]" when calling ServiceApi.get_service_jobs, number of items must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'required_skills'].nil? && opts[:'required_skills'].length > 20
        fail ArgumentError, 'invalid value for "opts[:"required_skills"]" when calling ServiceApi.get_service_jobs, number of items must be less than or equal to 20.'
      end

      if @api_client.config.client_side_validation && !opts[:'required_skills'].nil? && opts[:'required_skills'].length < 1
        fail ArgumentError, 'invalid value for "opts[:"required_skills"]" when calling ServiceApi.get_service_jobs, number of items must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'store_ids'].nil? && opts[:'store_ids'].length > 50
        fail ArgumentError, 'invalid value for "opts[:"store_ids"]" when calling ServiceApi.get_service_jobs, number of items must be less than or equal to 50.'
      end

      if @api_client.config.client_side_validation && !opts[:'store_ids'].nil? && opts[:'store_ids'].length < 1
        fail ArgumentError, 'invalid value for "opts[:"store_ids"]" when calling ServiceApi.get_service_jobs, number of items must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/service/v1/serviceJobs'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'marketplaceIds'] = @api_client.build_collection_param(marketplace_ids, :csv)
      query_params[:'serviceOrderIds'] = @api_client.build_collection_param(opts[:'service_order_ids'], :csv) if !opts[:'service_order_ids'].nil?
      query_params[:'serviceJobStatus'] = @api_client.build_collection_param(opts[:'service_job_status'], :csv) if !opts[:'service_job_status'].nil?
      query_params[:'pageToken'] = opts[:'page_token'] if !opts[:'page_token'].nil?
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sortField'] = opts[:'sort_field'] if !opts[:'sort_field'].nil?
      query_params[:'sortOrder'] = opts[:'sort_order'] if !opts[:'sort_order'].nil?
      query_params[:'createdAfter'] = opts[:'created_after'] if !opts[:'created_after'].nil?
      query_params[:'createdBefore'] = opts[:'created_before'] if !opts[:'created_before'].nil?
      query_params[:'lastUpdatedAfter'] = opts[:'last_updated_after'] if !opts[:'last_updated_after'].nil?
      query_params[:'lastUpdatedBefore'] = opts[:'last_updated_before'] if !opts[:'last_updated_before'].nil?
      query_params[:'scheduleStartDate'] = opts[:'schedule_start_date'] if !opts[:'schedule_start_date'].nil?
      query_params[:'scheduleEndDate'] = opts[:'schedule_end_date'] if !opts[:'schedule_end_date'].nil?
      query_params[:'asins'] = @api_client.build_collection_param(opts[:'asins'], :csv) if !opts[:'asins'].nil?
      query_params[:'requiredSkills'] = @api_client.build_collection_param(opts[:'required_skills'], :csv) if !opts[:'required_skills'].nil?
      query_params[:'storeIds'] = @api_client.build_collection_param(opts[:'store_ids'], :csv) if !opts[:'store_ids'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetServiceJobsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ServiceApi.get_service_jobs",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServiceApi#get_service_jobs\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Reschedules an appointment for the service job indicated by the service job identifier specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
    # @param service_job_id [String] An Amazon defined service job identifier.
    # @param appointment_id [String] An existing appointment identifier for the Service Job.
    # @param body [RescheduleAppointmentRequest] Reschedule appointment operation input details.
    # @param [Hash] opts the optional parameters
    # @return [SetAppointmentResponse]
    def reschedule_appointment_for_service_job_by_service_job_id(service_job_id, appointment_id, body, opts = {})
      data, _status_code, _headers = reschedule_appointment_for_service_job_by_service_job_id_with_http_info(service_job_id, appointment_id, body, opts)
      data
    end

    # Reschedules an appointment for the service job indicated by the service job identifier specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
    # @param service_job_id [String] An Amazon defined service job identifier.
    # @param appointment_id [String] An existing appointment identifier for the Service Job.
    # @param body [RescheduleAppointmentRequest] Reschedule appointment operation input details.
    # @param [Hash] opts the optional parameters
    # @return [Array<(SetAppointmentResponse, Integer, Hash)>] SetAppointmentResponse data, response status code and response headers
    def reschedule_appointment_for_service_job_by_service_job_id_with_http_info(service_job_id, appointment_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServiceApi.reschedule_appointment_for_service_job_by_service_job_id ...'
      end
      # verify the required parameter 'service_job_id' is set
      if @api_client.config.client_side_validation && service_job_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_job_id' when calling ServiceApi.reschedule_appointment_for_service_job_by_service_job_id"
      end
      if @api_client.config.client_side_validation && service_job_id.to_s.length > 100
        fail ArgumentError, 'invalid value for "service_job_id" when calling ServiceApi.reschedule_appointment_for_service_job_by_service_job_id, the character length must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && service_job_id.to_s.length < 1
        fail ArgumentError, 'invalid value for "service_job_id" when calling ServiceApi.reschedule_appointment_for_service_job_by_service_job_id, the character length must be great than or equal to 1.'
      end

      # verify the required parameter 'appointment_id' is set
      if @api_client.config.client_side_validation && appointment_id.nil?
        fail ArgumentError, "Missing the required parameter 'appointment_id' when calling ServiceApi.reschedule_appointment_for_service_job_by_service_job_id"
      end
      if @api_client.config.client_side_validation && appointment_id.to_s.length > 100
        fail ArgumentError, 'invalid value for "appointment_id" when calling ServiceApi.reschedule_appointment_for_service_job_by_service_job_id, the character length must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && appointment_id.to_s.length < 1
        fail ArgumentError, 'invalid value for "appointment_id" when calling ServiceApi.reschedule_appointment_for_service_job_by_service_job_id, the character length must be great than or equal to 1.'
      end

      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ServiceApi.reschedule_appointment_for_service_job_by_service_job_id"
      end
      # resource path
      local_var_path = '/service/v1/serviceJobs/{serviceJobId}/appointments/{appointmentId}'.sub('{' + 'serviceJobId' + '}', CGI.escape(service_job_id.to_s)).sub('{' + 'appointmentId' + '}', CGI.escape(appointment_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'SetAppointmentResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ServiceApi.reschedule_appointment_for_service_job_by_service_job_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServiceApi#reschedule_appointment_for_service_job_by_service_job_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Updates the appointment fulfillment data related to a given `jobID` and `appointmentID`.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
    # @param service_job_id [String] An Amazon-defined service job identifier. Get this value by calling the &#x60;getServiceJobs&#x60; operation of the Services API.
    # @param appointment_id [String] An Amazon-defined identifier of active service job appointment.
    # @param body [SetAppointmentFulfillmentDataRequest] Appointment fulfillment data collection details.
    # @param [Hash] opts the optional parameters
    # @return [String]
    def set_appointment_fulfillment_data(service_job_id, appointment_id, body, opts = {})
      data, _status_code, _headers = set_appointment_fulfillment_data_with_http_info(service_job_id, appointment_id, body, opts)
      data
    end

    # Updates the appointment fulfillment data related to a given &#x60;jobID&#x60; and &#x60;appointmentID&#x60;.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
    # @param service_job_id [String] An Amazon-defined service job identifier. Get this value by calling the &#x60;getServiceJobs&#x60; operation of the Services API.
    # @param appointment_id [String] An Amazon-defined identifier of active service job appointment.
    # @param body [SetAppointmentFulfillmentDataRequest] Appointment fulfillment data collection details.
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def set_appointment_fulfillment_data_with_http_info(service_job_id, appointment_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServiceApi.set_appointment_fulfillment_data ...'
      end
      # verify the required parameter 'service_job_id' is set
      if @api_client.config.client_side_validation && service_job_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_job_id' when calling ServiceApi.set_appointment_fulfillment_data"
      end
      if @api_client.config.client_side_validation && service_job_id.to_s.length > 100
        fail ArgumentError, 'invalid value for "service_job_id" when calling ServiceApi.set_appointment_fulfillment_data, the character length must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && service_job_id.to_s.length < 1
        fail ArgumentError, 'invalid value for "service_job_id" when calling ServiceApi.set_appointment_fulfillment_data, the character length must be great than or equal to 1.'
      end

      # verify the required parameter 'appointment_id' is set
      if @api_client.config.client_side_validation && appointment_id.nil?
        fail ArgumentError, "Missing the required parameter 'appointment_id' when calling ServiceApi.set_appointment_fulfillment_data"
      end
      if @api_client.config.client_side_validation && appointment_id.to_s.length > 100
        fail ArgumentError, 'invalid value for "appointment_id" when calling ServiceApi.set_appointment_fulfillment_data, the character length must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && appointment_id.to_s.length < 1
        fail ArgumentError, 'invalid value for "appointment_id" when calling ServiceApi.set_appointment_fulfillment_data, the character length must be great than or equal to 1.'
      end

      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ServiceApi.set_appointment_fulfillment_data"
      end
      # resource path
      local_var_path = '/service/v1/serviceJobs/{serviceJobId}/appointments/{appointmentId}/fulfillment'.sub('{' + 'serviceJobId' + '}', CGI.escape(service_job_id.to_s)).sub('{' + 'appointmentId' + '}', CGI.escape(appointment_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'String'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ServiceApi.set_appointment_fulfillment_data",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServiceApi#set_appointment_fulfillment_data\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a reservation.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
    # @param reservation_id [String] Reservation Identifier
    # @param marketplace_ids [Array<String>] An identifier for the marketplace in which the resource operates.
    # @param body [UpdateReservationRequest] Reservation details
    # @param [Hash] opts the optional parameters
    # @return [UpdateReservationResponse]
    def update_reservation(reservation_id, marketplace_ids, body, opts = {})
      data, _status_code, _headers = update_reservation_with_http_info(reservation_id, marketplace_ids, body, opts)
      data
    end

    # Update a reservation.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
    # @param reservation_id [String] Reservation Identifier
    # @param marketplace_ids [Array<String>] An identifier for the marketplace in which the resource operates.
    # @param body [UpdateReservationRequest] Reservation details
    # @param [Hash] opts the optional parameters
    # @return [Array<(UpdateReservationResponse, Integer, Hash)>] UpdateReservationResponse data, response status code and response headers
    def update_reservation_with_http_info(reservation_id, marketplace_ids, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServiceApi.update_reservation ...'
      end
      # verify the required parameter 'reservation_id' is set
      if @api_client.config.client_side_validation && reservation_id.nil?
        fail ArgumentError, "Missing the required parameter 'reservation_id' when calling ServiceApi.update_reservation"
      end
      if @api_client.config.client_side_validation && reservation_id.to_s.length > 100
        fail ArgumentError, 'invalid value for "reservation_id" when calling ServiceApi.update_reservation, the character length must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && reservation_id.to_s.length < 1
        fail ArgumentError, 'invalid value for "reservation_id" when calling ServiceApi.update_reservation, the character length must be great than or equal to 1.'
      end

      # verify the required parameter 'marketplace_ids' is set
      if @api_client.config.client_side_validation && marketplace_ids.nil?
        fail ArgumentError, "Missing the required parameter 'marketplace_ids' when calling ServiceApi.update_reservation"
      end
      if @api_client.config.client_side_validation && marketplace_ids.length > 1
        fail ArgumentError, 'invalid value for "marketplace_ids" when calling ServiceApi.update_reservation, number of items must be less than or equal to 1.'
      end

      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ServiceApi.update_reservation"
      end
      # resource path
      local_var_path = '/service/v1/reservation/{reservationId}'.sub('{' + 'reservationId' + '}', CGI.escape(reservation_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'marketplaceIds'] = @api_client.build_collection_param(marketplace_ids, :csv)

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'UpdateReservationResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ServiceApi.update_reservation",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServiceApi#update_reservation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update the schedule of the given resource.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
    # @param resource_id [String] Resource (store) Identifier
    # @param marketplace_ids [Array<String>] An identifier for the marketplace in which the resource operates.
    # @param body [UpdateScheduleRequest] Schedule details
    # @param [Hash] opts the optional parameters
    # @return [UpdateScheduleResponse]
    def update_schedule(resource_id, marketplace_ids, body, opts = {})
      data, _status_code, _headers = update_schedule_with_http_info(resource_id, marketplace_ids, body, opts)
      data
    end

    # Update the schedule of the given resource.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
    # @param resource_id [String] Resource (store) Identifier
    # @param marketplace_ids [Array<String>] An identifier for the marketplace in which the resource operates.
    # @param body [UpdateScheduleRequest] Schedule details
    # @param [Hash] opts the optional parameters
    # @return [Array<(UpdateScheduleResponse, Integer, Hash)>] UpdateScheduleResponse data, response status code and response headers
    def update_schedule_with_http_info(resource_id, marketplace_ids, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServiceApi.update_schedule ...'
      end
      # verify the required parameter 'resource_id' is set
      if @api_client.config.client_side_validation && resource_id.nil?
        fail ArgumentError, "Missing the required parameter 'resource_id' when calling ServiceApi.update_schedule"
      end
      if @api_client.config.client_side_validation && resource_id.to_s.length > 100
        fail ArgumentError, 'invalid value for "resource_id" when calling ServiceApi.update_schedule, the character length must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && resource_id.to_s.length < 1
        fail ArgumentError, 'invalid value for "resource_id" when calling ServiceApi.update_schedule, the character length must be great than or equal to 1.'
      end

      # verify the required parameter 'marketplace_ids' is set
      if @api_client.config.client_side_validation && marketplace_ids.nil?
        fail ArgumentError, "Missing the required parameter 'marketplace_ids' when calling ServiceApi.update_schedule"
      end
      if @api_client.config.client_side_validation && marketplace_ids.length > 1
        fail ArgumentError, 'invalid value for "marketplace_ids" when calling ServiceApi.update_schedule, number of items must be less than or equal to 1.'
      end

      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ServiceApi.update_schedule"
      end
      # resource path
      local_var_path = '/service/v1/serviceResources/{resourceId}/schedules'.sub('{' + 'resourceId' + '}', CGI.escape(resource_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'marketplaceIds'] = @api_client.build_collection_param(marketplace_ids, :csv)

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'UpdateScheduleResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ServiceApi.update_schedule",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServiceApi#update_schedule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
